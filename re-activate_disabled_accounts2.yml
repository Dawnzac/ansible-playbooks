---
- name: Undo user changes and restore disabled accounts
  hosts: "{{ ansible_limit | default(omit) }}"
  gather_facts: no
  tasks:
    - name: Check if script marker file exists
      ansible.windows.win_stat:
        path: C:\Windows\Temp\ansible_disabled_users.txt
      register: disabled_users_marker

    - name: Fail if no disabled users file found
      fail:
        msg: "No disabled user list found. The script was either not run before or marker file is missing."
      when: not disabled_users_marker.stat.exists

    - name: Get list of previously disabled users
      ansible.windows.win_shell: |
        Get-Content C:\Windows\Temp\ansible_disabled_users.txt
      register: disabled_users
      changed_when: false

    - name: Enable previously disabled users
      ansible.windows.win_shell: |
        $users = '{{ disabled_users.stdout_lines | join("','") }}' -split ','
        foreach ($user in $users) {
          if ($user -ne "") {
            Write-Output "Enabling user: $user"
            Enable-LocalUser -Name $user -ErrorAction SilentlyContinue
          }
        }
      register: enable_output
      changed_when: "'Enabling user' in enable_output.stdout"

    - name: Remove the 'exam' user
      ansible.windows.win_user:
        name: exam
        state: absent

    - name: Get SID of 'exam' user
      ansible.windows.win_shell: |
        $sid = (New-Object System.Security.Principal.NTAccount("exam")).Translate([System.Security.Principal.SecurityIdentifier]).Value
        Write-Output $sid
      register: exam_sid
      ignore_errors: yes
      changed_when: false

    - name: Remove profile entry from registry if exists
      ansible.windows.win_shell: |
        $sid = "{{ exam_sid.stdout }}"
        $profileKey = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\$sid"
        if (Test-Path $profileKey) {
          Remove-Item -Path $profileKey -Force -Recurse
          Write-Output "Profile entry removed: $profileKey"
        } else {
          Write-Output "No profile entry found for 'exam'."
        }
      when: exam_sid.stdout != ""
      ignore_errors: yes
      register: remove_profile_output

    - name: Delete cached profiles for 'exam' user
      ansible.windows.win_shell: |
        $userProfilePath = "C:\Users\exam"
        if (Test-Path $userProfilePath) {
          Remove-Item -Path $userProfilePath -Recurse -Force -ErrorAction SilentlyContinue
          Write-Output "Deleted user profile: $userProfilePath"
        } else {
          Write-Output "Profile folder not found."
        }
      ignore_errors: yes
      register: profile_delete_output

    - name: Clean stale registry profiles if profile still lingers
      ansible.windows.win_shell: |
        $profilePath = "C:\Users\exam"
        $sid = "{{ exam_sid.stdout }}"
        if (Test-Path $profilePath -or (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\$sid")) {
          Write-Output "Warning: Profile or registry key still exists. Forcing cleanup..."
          Remove-Item -Path $profilePath -Recurse -Force -ErrorAction SilentlyContinue
          if ($sid) {
            Remove-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList\$sid" -Force -Recurse -ErrorAction SilentlyContinue
          }
        }
      ignore_errors: yes
      changed_when: false

    - name: Delete marker files to reset state
      ansible.windows.win_file:
        path: "{{ item }}"
        state: absent
      with_items:
        - C:\Windows\Temp\ansible_script_marker.txt
        - C:\Windows\Temp\ansible_disabled_users.txt

    - name: Show re-enabled users
      debug:
        var: enable_output.stdout_lines

    - name: Reboot if profile cleanup was required
      ansible.windows.win_reboot:
        reboot_timeout: 600
      when: remove_profile_output.changed or profile_delete_output.changed
#ansible-playbook -i hosts undo_user_changes.yml -e "remove_exam=true"
